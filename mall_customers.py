# -*- coding: utf-8 -*-
"""Mall Customers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ABGAzf8CA3dew7piJy_19o-cddsyobs
"""

import pandas as pd

#Download data
df = pd.read_csv("Mall_Customers.csv")

# Show first 5 rows
df.head()

# General information about columns
df.info()

# Statistical description of the data
df.describe()

# Check for empty values
df.isnull().sum()

data = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(data['Age'], data['Annual Income (k$)'], data['Spending Score (1-100)'], c='blue', s=50)
ax.set_xlabel('Age')
ax.set_ylabel('Income')
ax.set_zlabel('Spending Score')
plt.title('Customer Distribution')
plt.show()

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

inertia = []

for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.grid(True)
plt.show()

from sklearn.cluster import KMeans

# Create the form with 5 groups
kmeans = KMeans(n_clusters=5, random_state=42)

# Model training
kmeans.fit(data)

# Add new columns (cluster)
df['Cluster'] = kmeans.labels_

# First class show with the group
df[['CustomerID', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'Cluster']].head()

import seaborn as sns
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='Set1', s=80)
plt.title('Customer Segments by Income and Spending')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.grid(True)
plt.show()

from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure(figsize=(9, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['Age'], df['Annual Income (k$)'], df['Spending Score (1-100)'],
           c=df['Cluster'], cmap='Set1', s=60)
ax.set_xlabel('Age')
ax.set_ylabel('Income')
ax.set_zlabel('Spending Score')
plt.title('3D View of Customer Segments')
plt.show()

df.groupby('Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean().round(1)

df['Cluster'].value_counts()

import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering

plt.figure(figsize=(10, 7))
dendrogram = sch.dendrogram(sch.linkage(data, method='ward'))
plt.title("Dendrogram for Customer Clustering")
plt.xlabel("Customers")
plt.ylabel("Euclidean Distances")
plt.show()

hc = AgglomerativeClustering(n_clusters=5, metric='euclidean', linkage='ward')

# Application form
df['HC_Cluster'] = hc.fit_predict(data)

# Show the first 5 rows with the new collection
df[['CustomerID', 'Age', 'Annual Income (k$)', 'Spending Score (1-100)', 'HC_Cluster']].head()

import seaborn as sns
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='HC_Cluster', palette='Set2', s=80)
plt.title("Hierarchical Clustering Result")
plt.grid(True)
plt.show()

df.groupby('HC_Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean().round(1)

from sklearn.mixture import GaussianMixture

gmm = GaussianMixture(n_components=5, random_state=42)
gmm.fit(data)

df['GMM_Cluster'] = gmm.predict(data)

import seaborn as sns
import matplotlib.pyplot as plt

sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)',
                hue='GMM_Cluster', palette='Set1', s=80)
plt.title("GMM Clustering Result")
plt.grid(True)
plt.show()

df.groupby('GMM_Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean().round(1)

from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

dbscan = DBSCAN(eps=0.8, min_samples=5)
df['DBSCAN_Cluster'] = dbscan.fit_predict(data_scaled)

sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)',
                hue='DBSCAN_Cluster', palette='tab10', s=80)
plt.title("DBSCAN Clustering Result")
plt.grid(True)
plt.show()

df['DBSCAN_Cluster'].value_counts()

df.groupby('DBSCAN_Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean().round(1)

def plot_clusters(df, x_col, y_col, cluster_col, title):
    import seaborn as sns
    import matplotlib.pyplot as plt

    plt.figure(figsize=(8,6))
    sns.scatterplot(data=df, x=x_col, y=y_col, hue=cluster_col, palette='Set1', s=80)
    plt.title(title)
    plt.grid(True)
    plt.show()

plot_clusters(df, 'Annual Income (k$)', 'Spending Score (1-100)', 'Cluster', 'KMeans Clustering')
plot_clusters(df, 'Annual Income (k$)', 'Spending Score (1-100)', 'HC_Cluster', 'HC Clustering')
plot_clusters(df, 'Annual Income (k$)', 'Spending Score (1-100)', 'GMM_Cluster', 'GMM Clustering')
plot_clusters(df, 'Annual Income (k$)', 'Spending Score (1-100)', 'DBSCAN_Cluster', 'DBSCAN Clustering')

df.to_csv("clustered_customers.csv", index=False)

!pip install streamlit pyngrok --quiet

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# 
# st.title("Customer Segmentation using Clustering")
# st.markdown("This app uses different unsupervised learning algorithms to segment customers based on their Age, Income, and Spending Score.")
# 
# df = pd.read_csv("clustered_customers.csv")
# st.subheader("📊 Raw Data")
# st.dataframe(df.head())
# 
# algo = st.selectbox("Select Clustering Algorithm", ['KMeans', 'HC', 'GMM', 'DBSCAN'])
# 
# cluster_col = f"{algo}_Cluster" if algo != 'KMeans' else 'Cluster'
# 
# st.subheader("📌 Cluster Summary")
# if cluster_col in df.columns:
#     summary = df.groupby(cluster_col)[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean().round(1)
#     st.dataframe(summary)
# else:
#     st.warning(f"Clustering column '{cluster_col}' not found!")
# 
# st.subheader("📍 Cluster Plot")
# fig, ax = plt.subplots()
# sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)',
#                 hue=df[cluster_col], palette='tab10', s=80, ax=ax)
# st.pyplot(fig)
# 
# st.download_button("⬇️ Download Clustered Data as CSV", data=df.to_csv(index=False), file_name="clustered_customers.csv", mime='text/csv')

from pyngrok import ngrok
ngrok.set_auth_token("2wE7Uov3N0umUI2Bdk5OmqtgwqP_36qf5vFcyuEsfamXUm1Bv")

public_url = ngrok.connect(8501, "http")
print("👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇")
print("Your Streamlit app is live at:", public_url)

!streamlit run app.py &> /dev/null &

from google.colab import files
files.download("app.py")